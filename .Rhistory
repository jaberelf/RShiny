#shiny template
library(shiny)
ui <- fluidPage(
)
num <- sliderInput(inputId = "num")
#shiny template
library(shiny)
ui <- fluidPage(
)
num <- sliderInput(inputId = "num", min = 100, max =1000)
#shiny template
library(shiny)
ui <- fluidPage(
)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100)
#shiny template
library(shiny)
ui <- fluidPage(
)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
server <- function(input, output) {
output$hist <- renderPlot({
#hist(rnorm(input$num))
hist(rnorm(1000), main = 'Histogtam')
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
ui <- fluidPage(
)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
#hist(rnorm(1000), main = 'Histogtam')
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
ui <- fluidPage(
num
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
#hist(rnorm(1000), main = 'Histogtam')
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
ui <- fluidPage(
num
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num
hist
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num
mainPanel(hist)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num ,
mainPanel(hist)
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- tableOutput(outputId = "hist")
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist")
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
print(output)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist", )
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
#shinyApp(ui, server)
print(output)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist", )
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
print(output)
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist", )
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui, server)
#shiny template
library(shiny)
num <- sliderInput(inputId = "num", min = 100, max =1000, value = 100, label = "Choose")
hist <- plotOutput(outputId = "hist", )
ui <- fluidPage(
num , hist
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num), main = "Histogram", xlab = "Num")
})
}
shinyApp(ui, server)
data("iris")
iris <- data("iris")
iris
iris <- data(iris)
iris
iris <- data(iris)
data(iris)
iris
class(iris)
kmeans(iris)
iris
iris <- iris %>% select(-Species)
library(tidyverse)
iris <- iris %>% select(-Species)
kmeans(iris)
iris
kmeans(iris, 3)
library(tidyverse)
library(shiny)
kmeans$cluster
km <- kmeans(iris, 3)
km$cluster
iris <- cbind(iris, km$cluster)
iris
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
km$cluster
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster)
iris
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster) %>%
mutate(cluster = km$cluster) %>%
select(-kmcluster)
irisclusters <- cbind(iris, km$cluster) %>%
mutate(cluster = km$cluster) %>%
select(-km$cluster)
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster) %>%
mutate(cluster = km$cluster) %>%
select(-km$cluster)
colnames(irisclusters)
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster) %>%
mutate(cluster = km$cluster) %>%
select(-km$cluster)
irisclusters
colnames(irisclusters)
ggplot(irisclusters, aes(x=sepa))
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster) %>%
mutate(cluster = km$cluster)
irisclusters
colnames(irisclusters)
ggplot(irisclusters, aes(x=sepa))
irisclusters <- irisclusters %>% select(-lm$cluster)
irisclusters <- irisclusters %>% select(-km$cluster)
irisclusters
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$clusters)
data(iris)
iris <- iris %>% select(-Species)
km <- kmeans(iris, 3)
irisclusters <- cbind(iris, km$cluster)
colnames(irisclusters)
ggplot(irisclusters, aes(x=sepa))
print(colnames(irisclusters))
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = km$cluster)) + geom_point(size = 5)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = km$cluster)) + geom_point(size = 5)
})
}
shinyApp(ui, server)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = km$cluster, palette = 'rainbow')) + geom_point(size = 5)
})
}
shinyApp(ui, server)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = km$cluster))
+ geom_point(size = 5) + scale_color_brewer(palette = 'rainbow')
})
}
shinyApp(ui, server)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = km$cluster)) + geom_point(size = 5) + scale_color_brewer(palette = 'rainbow')
})
}
shinyApp(ui, server)
irisclusters
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = as.integer(km$cluster))) + geom_point(size = 5) + scale_color_brewer(palette = 'rainbow')
})
}
shinyApp(ui, server)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = as.integer(km$cluster))) + geom_point(size = 5)
})
}
shinyApp(ui, server)
#yesno <- selectInput(inputId = "yesno", label = "Let the algo choose")
#put in conditional panel
nclust <- sliderInput(inputId = "nclust", min = 2, max = 20, value = 2, label = "Choose")
scatter <- plotOutput(outputId = "scatter")
ui <- fluidPage(
nclust, scatter
)
server <- function(input, output) {
output$scatter <- renderPlot({
km <- kmeans(iris, input$nclust)
ggplot(irisclusters, aes(x=Sepal.Length, y = Sepal.Width, color = factor(km$cluster))) + geom_point(size = 5)
})
}
shinyApp(ui, server)
x <- rnorm(50)
y <- 10 + x
y
cor(x,y)
x <- rnorm(50)
y <- x + rnorm(50, mean = 50)
cor(x,y)
x <- rnorm(50)
y <- x + rnorm(50, mean = 50)
cor(x,y)
y <- x + rnorm(50, mean = 50)
cor(x,y)
y <- x + rnorm(50, mean = 50)
cor(x,y)
y <- x + rnorm(50, mean = 50)
cor(x,y)
y <- x + rnorm(50, mean = 50)
cor(x,y)
plot(x,y)
x <- rnorm(50)
y <- x + rnorm(50, mean = 50)
cor(x,y)
plot(x,y)
x <- rnorm(50)
y <- x + rnorm(50, mean = 50)
cor(x,y)
plot(x,y)
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
contour (x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2 >
contour (x,y,fa,nlevels =15)
x <- seq(-pi, pi, 10)
y=x
f=outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
f <- outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
x
y
x <- seq(-pi, pi, 10)
x
x <- seq(-pi, pi, 50)
x
y <- seq(1, 20, 10)
y
y <- seq(1, 20, length =10)
f <- outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
x <- 1:10
y <- seq(1, 20, length =10)
f <- outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
contour (x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2 >
contour (x,y,fa,nlevels =15)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
x <- 1:10
y<- 1:10
f <- outer(x,y,function (x,y)cos(y)/(1+x^2))
contour (x,y,f)
contour (x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2
contour (x,y,fa,nlevels =15)
install.packages("ISLR")
auto <- read.table("Auto.data")
head(auto)
library(ISLR)
auto <- read.table("Auto.data")
head(auto)
library(ISLR)
library(ISLR)
auto <- ISLR::Auto
head(auto)
class(auto)
colnames(auto*)
colnames(auto)
names(auto)
names(auto) == colnames(auto)
attach(auto)
plot(mpg, cylinders)
plot(year, cylinders)
plot(year, mpg)
plot(year, horsepower)
plot(year, avg(horsepower))
plot(year, mean(horsepower))
plot(year, mean(horsepower), type = "l")
plot(year, mean(horsepower), type = "l")
pairs(Auto)
identify(mpg, horsepower)
help(reactive)
help(??reactive)
??reactive
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
